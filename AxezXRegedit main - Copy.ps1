
$base64 = @"
77u/Y2hjcCA2NTAwMSA+ICRudWxsCgojID09PT09PT09PT09PT09PT09PT09IE1BSU4gU0NSSVBUIEVYRUNVVElPTiA9PT09PT09PT09PT09PT09PT09PQoKQ2xlYXItSG9zdAojIEdldCBTSUQgd2l0aCBlcnJvciBoYW5kbGluZwp0cnkgewogICAgJHNpZCA9IChbU3lzdGVtLlNlY3VyaXR5LlByaW5jaXBhbC5XaW5kb3dzSWRlbnRpdHldOjpHZXRDdXJyZW50KCkpLlVzZXIuVmFsdWUKICAgIFdyaXRlLUhvc3QgImBuWypdIFlvdXIgU0lEOiAkc2lkIiAtRm9yZWdyb3VuZENvbG9yIFllbGxvdwp9CmNhdGNoIHsKICAgIFdyaXRlLUhvc3QgIlshXSBGYWlsZWQgdG8gZ2V0IFNJRDogJF8iIC1Gb3JlZ3JvdW5kQ29sb3IgUmVkCiAgICBleGl0Cn0KIyBDb3JyZWN0IEdpdEh1YiByYXcgVVJMCiRhdXRoVVJMID0gImh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9BeGV6WFJlZ2VkaXQvUkVHL3JlZnMvaGVhZHMvbWFpbi9IV0lEX0NIRUNLIgoKdHJ5IHsKICAgICRyYXdEYXRhID0gSW52b2tlLVJlc3RNZXRob2QgLVVyaSAkYXV0aFVSTCAtVXNlQmFzaWNQYXJzaW5nCn0gY2F0Y2ggewogICAgV3JpdGUtSG9zdCAiYG5bIV0gRmFpbGVkIHRvIGZldGNoIGF1dGhvcml6ZWQgU0lEcyBmcm9tIHNlcnZlci4iIC1Gb3JlZ3JvdW5kQ29sb3IgUmVkCiAgICBleGl0Cn0KCiMgQ2hlY2sgaWYgU0lEIGlzIGF1dGhvcml6ZWQKaWYgKCRyYXdEYXRhIC1ub3RtYXRjaCAkc2lkKSB7CiAgICBXcml0ZS1Ib3N0ICJgblshXVdobyB0aGUgRnVjayBBcmUgWW91ID8/IE5pZ2dhICEhISIgLUZvcmVncm91bmRDb2xvciBSZWQKICAgIFN0YXJ0LVNsZWVwIC1TZWNvbmRzIDYKICAgIGV4aXQKfQoKIyA9PT09PT09PT09PT09PT09PT09PSBEUkFHIEFTU0lTVCBJTVBMRU1FTlRBVElPTiA9PT09PT09PT09PT09PT09PT09PQokY3NoYXJwQ29kZSA9IEAiCnVzaW5nIFN5c3RlbTsKdXNpbmcgU3lzdGVtLlJ1bnRpbWUuSW50ZXJvcFNlcnZpY2VzOwp1c2luZyBTeXN0ZW0uVGhyZWFkaW5nOwp1c2luZyBTeXN0ZW0uRGlhZ25vc3RpY3M7CgpwdWJsaWMgY2xhc3MgU2FnZVhEcmFnQXNzaXN0IHsKICAgIFtEbGxJbXBvcnQoInVzZXIzMi5kbGwiKV0KICAgIHB1YmxpYyBzdGF0aWMgZXh0ZXJuIGJvb2wgR2V0Q3Vyc29yUG9zKG91dCBQT0lOVCBscFBvaW50KTsKCiAgICBbRGxsSW1wb3J0KCJ1c2VyMzIuZGxsIildCiAgICBwdWJsaWMgc3RhdGljIGV4dGVybiB2b2lkIG1vdXNlX2V2ZW50KGludCBkd0ZsYWdzLCBpbnQgZHgsIGludCBkeSwgaW50IGR3RGF0YSwgaW50IGR3RXh0cmFJbmZvKTsKCiAgICBbRGxsSW1wb3J0KCJ1c2VyMzIuZGxsIildCiAgICBwdWJsaWMgc3RhdGljIGV4dGVybiBzaG9ydCBHZXRBc3luY0tleVN0YXRlKGludCB2S2V5KTsKCiAgICBbRGxsSW1wb3J0KCJrZXJuZWwzMi5kbGwiKV0KICAgIHB1YmxpYyBzdGF0aWMgZXh0ZXJuIGJvb2wgU2V0Q29uc29sZVRpdGxlKHN0cmluZyBscENvbnNvbGVUaXRsZSk7CgogICAgW0RsbEltcG9ydCgia2VybmVsMzIuZGxsIildCiAgICBwdWJsaWMgc3RhdGljIGV4dGVybiBib29sIEJlZXAoaW50IGR3RnJlcSwgaW50IGR3RHVyYXRpb24pOwoKICAgIFtTdHJ1Y3RMYXlvdXQoTGF5b3V0S2luZC5TZXF1ZW50aWFsKV0KICAgIHB1YmxpYyBzdHJ1Y3QgUE9JTlQgewogICAgICAgIHB1YmxpYyBpbnQgWDsKICAgICAgICBwdWJsaWMgaW50IFk7CiAgICB9CgogICAgcHVibGljIHN0YXRpYyBib29sIEVuYWJsZWQgPSB0cnVlOwogICAgcHVibGljIHN0YXRpYyBpbnQgU3RyZW5ndGggPSA1OwogICAgcHVibGljIHN0YXRpYyBpbnQgU21vb3RobmVzcyA9IDU7CiAgICBwdWJsaWMgc3RhdGljIGludCBBc3Npc3RMZXZlbCA9IDU7CiAgICBwdWJsaWMgc3RhdGljIGludCBGcmFtZXMgPSAwOwogICAgcHVibGljIHN0YXRpYyBkb3VibGUgQXZlcmFnZUxhdGVuY3kgPSAwOwogICAgcHVibGljIHN0YXRpYyBTdG9wd2F0Y2ggZnJhbWVUaW1lciA9IG5ldyBTdG9wd2F0Y2goKTsKCiAgICBwdWJsaWMgc3RhdGljIHZvaWQgVXBkYXRlQ29uc29sZVRpdGxlKCkgewogICAgICAgIHN0cmluZyBzdGF0dXMgPSBFbmFibGVkID8gIkFDVElWRSIgOiAiSU5BQ1RJVkUiOwogICAgICAgIHN0cmluZyB0aXRsZSA9IHN0cmluZy5Gb3JtYXQoCiAgICAgICAgICAgICJTYWdlWCBEcmFnIEFzc2lzdCB8IFN0YXR1czogezB9IHwgU3RyZW5ndGg6IHsxfSB8IFNtb290aG5lc3M6IHsyfSB8IEFzc2lzdDogezN9IHwgRlBTOiB7NH0gfCBMYXRlbmN5OiB7NTowLjAwfW1zIiwKICAgICAgICAgICAgc3RhdHVzLCBTdHJlbmd0aCwgU21vb3RobmVzcywgQXNzaXN0TGV2ZWwsIEZyYW1lcywgQXZlcmFnZUxhdGVuY3kKICAgICAgICApOwogICAgICAgIFNldENvbnNvbGVUaXRsZSh0aXRsZSk7CiAgICB9CgogICAgcHVibGljIHN0YXRpYyB2b2lkIFBsYXlLZXlCZWVwKCkgewogICAgICAgIEJlZXAoODAwLCA1MCk7CiAgICB9CgogICAgcHVibGljIHN0YXRpYyB2b2lkIFJ1bigpIHsKICAgICAgICBQT0lOVCBwcmV2OwogICAgICAgIEdldEN1cnNvclBvcyhvdXQgcHJldik7CiAgICAgICAgYm9vbCBpc0hvbGRpbmcgPSBmYWxzZTsKICAgICAgICBEYXRlVGltZSBwcmVzc1N0YXJ0ID0gRGF0ZVRpbWUuTWluVmFsdWU7CiAgICAgICAgZnJhbWVUaW1lci5TdGFydCgpOwogICAgICAgIGxvbmcgbGFzdEZyYW1lVGltZSA9IDA7CiAgICAgICAgbG9uZyBsYXRlbmN5U3VtID0gMDsKICAgICAgICBpbnQgZnJhbWVDb3VudCA9IDA7CgogICAgICAgIC8vIEhpZGUgY29uc29sZSBjdXJzb3Igd2l0aG91dCBoaWRpbmcgd2luZG93CiAgICAgICAgQ29uc29sZS5DdXJzb3JWaXNpYmxlID0gZmFsc2U7CgogICAgICAgIHdoaWxlICh0cnVlKSB7CiAgICAgICAgICAgIGxvbmcgZnJhbWVTdGFydCA9IGZyYW1lVGltZXIuRWxhcHNlZE1pbGxpc2Vjb25kczsKICAgICAgICAgICAgCiAgICAgICAgICAgIC8vIEhhbmRsZSBrZXkgcHJlc3NlcyBmb3IgY29udHJvbHMKICAgICAgICAgICAgaWYgKChHZXRBc3luY0tleVN0YXRlKDB4NzYpICYgMHg4MDAwKSAhPSAwKSB7ICAvLyBGNwogICAgICAgICAgICAgICAgRW5hYmxlZCA9ICFFbmFibGVkOwogICAgICAgICAgICAgICAgUGxheUtleUJlZXAoKTsKICAgICAgICAgICAgICAgIFVwZGF0ZUNvbnNvbGVUaXRsZSgpOwogICAgICAgICAgICAgICAgVGhyZWFkLlNsZWVwKDIwMCk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgaWYgKChHZXRBc3luY0tleVN0YXRlKDB4MmQpICYgMHg4MDAwKSAhPSAwICYmIFN0cmVuZ3RoIDwgMTApIHsgIC8vIEY0CiAgICAgICAgICAgICAgICBTdHJlbmd0aCsrOwogICAgICAgICAgICAgICAgUGxheUtleUJlZXAoKTsKICAgICAgICAgICAgICAgIFVwZGF0ZUNvbnNvbGVUaXRsZSgpOwogICAgICAgICAgICAgICAgVGhyZWFkLlNsZWVwKDIwMCk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgaWYgKChHZXRBc3luY0tleVN0YXRlKDB4MmUpICYgMHg4MDAwKSAhPSAwICYmIFN0cmVuZ3RoID4gMSkgeyAgLy8gRjMKICAgICAgICAgICAgICAgIFN0cmVuZ3RoLS07CiAgICAgICAgICAgICAgICBQbGF5S2V5QmVlcCgpOwogICAgICAgICAgICAgICAgVXBkYXRlQ29uc29sZVRpdGxlKCk7CiAgICAgICAgICAgICAgICBUaHJlYWQuU2xlZXAoMjAwKTsKICAgICAgICAgICAgfQogICAgICAgICAgICBpZiAoKEdldEFzeW5jS2V5U3RhdGUoMHgyNCkgJiAweDgwMDApICE9IDAgJiYgU21vb3RobmVzcyA8IDEwKSB7ICAvLyBGNQogICAgICAgICAgICAgICAgU21vb3RobmVzcysrOwogICAgICAgICAgICAgICAgUGxheUtleUJlZXAoKTsKICAgICAgICAgICAgICAgIFVwZGF0ZUNvbnNvbGVUaXRsZSgpOwogICAgICAgICAgICAgICAgVGhyZWFkLlNsZWVwKDIwMCk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgaWYgKChHZXRBc3luY0tleVN0YXRlKDB4MjMpICYgMHg4MDAwKSAhPSAwICYmIFNtb290aG5lc3MgPiAxKSB7ICAvLyBGMgogICAgICAgICAgICAgICAgU21vb3RobmVzcy0tOwogICAgICAgICAgICAgICAgUGxheUtleUJlZXAoKTsKICAgICAgICAgICAgICAgIFVwZGF0ZUNvbnNvbGVUaXRsZSgpOwogICAgICAgICAgICAgICAgVGhyZWFkLlNsZWVwKDIwMCk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgaWYgKChHZXRBc3luY0tleVN0YXRlKDB4MjEpICYgMHg4MDAwKSAhPSAwICYmIEFzc2lzdExldmVsIDwgMTApIHsgIC8vIEY2CiAgICAgICAgICAgICAgICBBc3Npc3RMZXZlbCsrOwogICAgICAgICAgICAgICAgUGxheUtleUJlZXAoKTsKICAgICAgICAgICAgICAgIFVwZGF0ZUNvbnNvbGVUaXRsZSgpOwogICAgICAgICAgICAgICAgVGhyZWFkLlNsZWVwKDIwMCk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgaWYgKChHZXRBc3luY0tleVN0YXRlKDB4MjIpICYgMHg4MDAwKSAhPSAwICYmIEFzc2lzdExldmVsID4gMSkgeyAgLy8gRjEKICAgICAgICAgICAgICAgIEFzc2lzdExldmVsLS07CiAgICAgICAgICAgICAgICBQbGF5S2V5QmVlcCgpOwogICAgICAgICAgICAgICAgVXBkYXRlQ29uc29sZVRpdGxlKCk7CiAgICAgICAgICAgICAgICBUaHJlYWQuU2xlZXAoMjAwKTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgaWYgKCFFbmFibGVkKSB7CiAgICAgICAgICAgICAgICBUaHJlYWQuU2xlZXAoMTApOwogICAgICAgICAgICAgICAgY29udGludWU7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGJvb2wgbG1iRG93biA9IChHZXRBc3luY0tleVN0YXRlKDB4MDEpICYgMHg4MDAwKSAhPSAwOwoKICAgICAgICAgICAgaWYgKGxtYkRvd24pIHsKICAgICAgICAgICAgICAgIGlmICghaXNIb2xkaW5nKSB7CiAgICAgICAgICAgICAgICAgICAgaXNIb2xkaW5nID0gdHJ1ZTsKICAgICAgICAgICAgICAgICAgICBwcmVzc1N0YXJ0ID0gRGF0ZVRpbWUuTm93OwogICAgICAgICAgICAgICAgfSAKICAgICAgICAgICAgICAgIGVsc2UgaWYgKChEYXRlVGltZS5Ob3cgLSBwcmVzc1N0YXJ0KS5Ub3RhbE1pbGxpc2Vjb25kcyA+PSAoMTAwIC0gKFNtb290aG5lc3MgKiA3KSkpIHsKICAgICAgICAgICAgICAgICAgICBQT0lOVCBjdXJyOwogICAgICAgICAgICAgICAgICAgIEdldEN1cnNvclBvcyhvdXQgY3Vycik7CgogICAgICAgICAgICAgICAgICAgIGludCBkZWx0YVkgPSBjdXJyLlkgLSBwcmV2Llk7CiAgICAgICAgICAgICAgICAgICAgaW50IGRlbHRhWCA9IGN1cnIuWCAtIHByZXYuWDsKCiAgICAgICAgICAgICAgICAgICAgaWYgKGRlbHRhWSA8IC0xKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGRvdWJsZSBzdHJlbmd0aEZhY3RvciA9IDAuMiArIChTdHJlbmd0aCAqIDAuMDYpOwogICAgICAgICAgICAgICAgICAgICAgICBkb3VibGUgYXNzaXN0RmFjdG9yID0gMC4zICsgKEFzc2lzdExldmVsICogMC4wNSk7CiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICBpbnQgY29ycmVjdGVkWCA9IChpbnQpKGRlbHRhWCAqIChzdHJlbmd0aEZhY3RvciAqIDAuNykpOwogICAgICAgICAgICAgICAgICAgICAgICBpbnQgY29ycmVjdGVkWSA9IChpbnQpKGRlbHRhWSAqIHN0cmVuZ3RoRmFjdG9yICogLWFzc2lzdEZhY3Rvcik7CgogICAgICAgICAgICAgICAgICAgICAgICBpbnQgc3RlcHMgPSAxICsgKGludCkoU21vb3RobmVzcyAqIDAuNSk7CiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoaW50IGkgPSAwOyBpIDwgc3RlcHM7IGkrKykgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgbW91c2VfZXZlbnQoMHgwMDAxLCBjb3JyZWN0ZWRYIC8gc3RlcHMsIGNvcnJlY3RlZFkgLyBzdGVwcywgMCwgMCk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBUaHJlYWQuU2xlZXAoMSk7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgcHJldiA9IGN1cnI7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0gCiAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgaXNIb2xkaW5nID0gZmFsc2U7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIC8vIENhbGN1bGF0ZSBGUFMgYW5kIGxhdGVuY3kKICAgICAgICAgICAgbG9uZyBmcmFtZVRpbWUgPSBmcmFtZVRpbWVyLkVsYXBzZWRNaWxsaXNlY29uZHMgLSBmcmFtZVN0YXJ0OwogICAgICAgICAgICBsYXRlbmN5U3VtICs9IGZyYW1lVGltZTsKICAgICAgICAgICAgZnJhbWVDb3VudCsrOwogICAgICAgICAgICAKICAgICAgICAgICAgaWYgKGZyYW1lVGltZXIuRWxhcHNlZE1pbGxpc2Vjb25kcyAtIGxhc3RGcmFtZVRpbWUgPj0gMTAwMCkgewogICAgICAgICAgICAgICAgRnJhbWVzID0gZnJhbWVDb3VudDsKICAgICAgICAgICAgICAgIEF2ZXJhZ2VMYXRlbmN5ID0gKGRvdWJsZSlsYXRlbmN5U3VtIC8gZnJhbWVDb3VudDsKICAgICAgICAgICAgICAgIGZyYW1lQ291bnQgPSAwOwogICAgICAgICAgICAgICAgbGF0ZW5jeVN1bSA9IDA7CiAgICAgICAgICAgICAgICBsYXN0RnJhbWVUaW1lID0gZnJhbWVUaW1lci5FbGFwc2VkTWlsbGlzZWNvbmRzOwogICAgICAgICAgICAgICAgVXBkYXRlQ29uc29sZVRpdGxlKCk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgCiAgICAgICAgICAgIFRocmVhZC5TbGVlcCgxKTsKICAgICAgICB9CiAgICB9Cn0KIkAKCiMgQWRkIHRoZSBDIyB0eXBlIGRlZmluaXRpb24KQWRkLVR5cGUgLVR5cGVEZWZpbml0aW9uICRjc2hhcnBDb2RlIC1SZWZlcmVuY2VkQXNzZW1ibGllcyAiU3lzdGVtLkRyYXdpbmciCgojIFN0YXJ0IHRoZSBkcmFnIGFzc2lzdCBpbiBhIHNlcGFyYXRlIHRocmVhZAokZHJhZ0Fzc2lzdFRocmVhZCA9IFtQb3dlclNoZWxsXTo6Q3JlYXRlKCkuQWRkU2NyaXB0KHsKICAgIFtTYWdlWERyYWdBc3Npc3RdOjpSdW4oKQp9KQoKJGhhbmRsZSA9ICRkcmFnQXNzaXN0VGhyZWFkLkJlZ2luSW52b2tlKCkKCiMgQ2FjaGUgdGhlIEFTQ0lJIGFydCB0byBwcmV2ZW50IHJlZ2VuZXJhdGluZyBpdCBldmVyeSB0aW1lCiRjb2xvcnMgPSBAKCJSZWQiLCAiWWVsbG93IiwgIkN5YW4iLCAiR3JlZW4iLCAiTWFnZW50YSIsICJCbHVlIiwgIldoaXRlIikKJGFzY2lpQXJ0ID0gQCcKCiAgIF9fX19fICBfX19fICBfX19fX19fX19fX19fX19fX19fX19fX18gX19fXyAgX19fIF9fX19fX19fX19fX19fX19fX19fXyBfX19fX19fX19fX19fX19fX19fX19fX19fX18gIC5fX19fX19fX19fX19fXwogIC8gIF8gIFwgXCAgIFwvICAvXF8gICBfX19fXy9cX19fXyAgICAvIFwgICBcLyAgLyBcX19fX19fICAgXF8gICBfX19fXy8vICBfX19fXy9cXyAgIF9fX19fL1xfX19fX18gXCB8ICAgXF9fICAgIF9fXy8KIC8gIC9fXCAgXCBcICAgICAvICB8ICAgIF9fKV8gICAvICAgICAvICAgXCAgICAgLyAgIHwgICAgICAgXy98ICAgIF9fKV8vICAgXCAgX19fIHwgICAgX18pXyAgfCAgICB8ICBcfCAgIHwgfCAgICB8ICAgCi8gICAgfCAgICBcLyAgICAgXCAgfCAgICAgICAgXCAvICAgICAvXyAgIC8gICAgIFwgICB8ICAgIHwgICBcfCAgICAgICAgXCAgICBcX1wgIFx8ICAgICAgICBcIHwgICAgYCAgIFwgICB8IHwgICAgfCAgIApcX19fX3xfXyAgL19fXy9cICBcL19fX19fX18gIC8vX19fX19fXyBcIC9fX18vXCAgXCAgfF9fX198XyAgL19fX19fX18gIC9cX19fX19fICAvX19fX19fXyAgLy9fX19fX19fICAvX19ffCB8X19fX3wgICAKICAgICAgICBcLyAgICAgIFxfLyAgICAgICAgXC8gICAgICAgICBcLyAgICAgICBcXy8gICAgICAgICBcLyAgICAgICAgXC8gICAgICAgIFwvICAgICAgICBcLyAgICAgICAgIFwvICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCidACgoKJGNhY2hlZEFzY2lpQXJ0ID0gJGFzY2lpQXJ0IC1zcGxpdCAiYG4iIHwgRm9yRWFjaC1PYmplY3QgewogICAgJGNvbG9yID0gR2V0LVJhbmRvbSAtSW5wdXRPYmplY3QgJGNvbG9ycwogICAgW1BTQ3VzdG9tT2JqZWN0XUB7TGluZT0kXzsgQ29sb3I9JGNvbG9yfQp9CgojIE9wdGltaXplZCBjb250cm9sIHBhbmVsIGRpc3BsYXkKZnVuY3Rpb24gU2hvdy1Db250cm9sUGFuZWwgewogICAgcGFyYW0oCiAgICAgICAgW2ludF0kU3RyZW5ndGggPSA1LAogICAgICAgIFtpbnRdJFNtb290aG5lc3MgPSA1LAogICAgICAgIFtpbnRdJEFzc2lzdExldmVsID0gNSwKICAgICAgICBbaW50XSRGcmFtZXMgPSAwLAogICAgICAgIFtkb3VibGVdJEF2ZXJhZ2VMYXRlbmN5ID0gMCwKICAgICAgICBbYm9vbF0kRW5hYmxlZCA9ICR0cnVlCiAgICApCiAgICAKICAgICMgU2V0IGN1cnNvciB0byB0b3AtbGVmdCBhbmQgY2xlYXIgZnJvbSBjdXJzb3IgZG93bgogICAgJGhvc3QuVUkuUmF3VUkuQ3Vyc29yUG9zaXRpb24gPSBAe1g9MDsgWT0wfQogICAgV3JpdGUtSG9zdCAiJChbY2hhcl0yNylbSiIgICMgQU5TSSBlc2NhcGUgdG8gY2xlYXIgZnJvbSBjdXJzb3IgZG93bgoKICAgICMgRHJhdyBjYWNoZWQgQVNDSUkgYXJ0CiAgICAkY2FjaGVkQXNjaWlBcnQgfCBGb3JFYWNoLU9iamVjdCB7CiAgICAgICAgV3JpdGUtSG9zdCAkXy5MaW5lIC1Gb3JlZ3JvdW5kQ29sb3IgJF8uQ29sb3IKICAgIH0KCiAgICAjIERyYXcgdGhlIHJlc3Qgb2YgdGhlIFVJIHdpdGggY29ycmVjdGVkIHN0cmluZyBtdWx0aXBsaWNhdGlvbgogICAgV3JpdGUtSG9zdCAiYG4iIC1Ob05ld2xpbmUKICAgIFdyaXRlLUhvc3QgKCItIiAqIDIwKSAtTm9OZXdsaW5lIC1Gb3JlZ3JvdW5kQ29sb3IgV2hpdGUKICAgIFdyaXRlLUhvc3QgIiBEUkFHIEFTU0lTVCBDT05UUk9MIFBBTkVMICIgLU5vTmV3bGluZSAtRm9yZWdyb3VuZENvbG9yIFdoaXRlCiAgICBXcml0ZS1Ib3N0ICgiLSIgKiAyMCkgLUZvcmVncm91bmRDb2xvciBXaGl0ZQoKICAgIFdyaXRlLUhvc3QgImBuWytdIFNJRDogIiAtTm9OZXdsaW5lIC1Gb3JlZ3JvdW5kQ29sb3IgR3JheQogICAgV3JpdGUtSG9zdCAkc2lkIC1Gb3JlZ3JvdW5kQ29sb3IgWWVsbG93CgogICAgJG1zZ0xpbmVzID0gQCgKICAgICJbK10gWW91ciBNb3VzZSBpcyBDb25uZWN0ZWQgV2l0aCBBeGV6WFJlZ2VkaXQgW0FJXSIsCiAgICAiWytdIFNlbnNpdGl2aXR5IFR3ZWFrZWQgRm9yIE1heGltdW0gUHJlY2lzaW9uIiwKICAgICJbK10gRHJhZyBBc3Npc3QgRW5hYmxlZCAtIEVhc3kgSGVhZHNob3RzIiwKICAgICJbK10gTG93IElucHV0IExhZyBNb2RlIE9OIiwKICAgICJbK10gSG9sZCBMTUIgZm9yIEF1dG8gRHJhZyBTdXBwb3J0IgogICAgKQogICAgJG1zZ0xpbmVzIHwgRm9yRWFjaC1PYmplY3QgewogICAgV3JpdGUtSG9zdCAkXyAtRm9yZWdyb3VuZENvbG9yIFJlZAogICAgfQoKICAgIFdyaXRlLUhvc3QgImBuIFNUQVRVUzogICAiIC1Ob05ld2xpbmUKICAgIGlmICgkRW5hYmxlZCkgeyAKICAgICAgICBXcml0ZS1Ib3N0ICJBQ1RJVkUgICIgLU5vTmV3bGluZSAtRm9yZWdyb3VuZENvbG9yIFdoaXRlCiAgICB9IGVsc2UgeyAKICAgICAgICBXcml0ZS1Ib3N0ICJJTkFDVElWRSIgLU5vTmV3bGluZSAtRm9yZWdyb3VuZENvbG9yIFdoaXRlCiAgICB9CiAgICBXcml0ZS1Ib3N0ICJgdGB0IEY3OiBUb2dnbGUgT04vT0ZGIgogICAgCiAgICBXcml0ZS1Ib3N0ICJgbiBTVFJFTkdUSDogICIgLU5vTmV3bGluZQogICAgMS4uMTAgfCBGb3JFYWNoLU9iamVjdCB7CiAgICAgICAgaWYgKCRfIC1sZSAkU3RyZW5ndGgpIHsKCVtDb25zb2xlXTo6T3V0cHV0RW5jb2RpbmcgPSBbU3lzdGVtLlRleHQuRW5jb2RpbmddOjpVVEY4CiAgICAgICAgICAgIFdyaXRlLUhvc3QgIuKWiCIgLU5vTmV3bGluZSAtRm9yZWdyb3VuZENvbG9yIEN5YW4KICAgICAgICB9IGVsc2UgewoJW0NvbnNvbGVdOjpPdXRwdXRFbmNvZGluZyA9IFtTeXN0ZW0uVGV4dC5FbmNvZGluZ106OlVURjgKICAgICAgICAgICAgV3JpdGUtSG9zdCAi4paIIiAtTm9OZXdsaW5lIC1Gb3JlZ3JvdW5kQ29sb3IgRGFya0dyYXkgCiAgICAgICAgfQogICAgfQogICAgV3JpdGUtSG9zdCAiYHQgSU5TRVJUOiBJbmNyZWFzZSB8IERFTEVURTogRGVjcmVhc2UiCiAgICAKICAgIFdyaXRlLUhvc3QgIiBTTU9PVEhORVNTOiAiIC1Ob05ld2xpbmUKICAgIDEuLjEwIHwgRm9yRWFjaC1PYmplY3QgewogICAgICAgIGlmICgkXyAtbGUgJFNtb290aG5lc3MpIHsKCVtDb25zb2xlXTo6T3V0cHV0RW5jb2RpbmcgPSBbU3lzdGVtLlRleHQuRW5jb2RpbmddOjpVVEY4CiAgICAgICAgICAgIFdyaXRlLUhvc3QgIuKWiCIgLU5vTmV3bGluZSAtRm9yZWdyb3VuZENvbG9yIEN5YW4gCiAgICAgICAgfSBlbHNlIHsKCVtDb25zb2xlXTo6T3V0cHV0RW5jb2RpbmcgPSBbU3lzdGVtLlRleHQuRW5jb2RpbmddOjpVVEY4CiAgICAgICAgICAgIFdyaXRlLUhvc3QgIuKWiCIgLU5vTmV3bGluZSAtRm9yZWdyb3VuZENvbG9yIERhcmtHcmF5CiAgICAgICAgfQogICAgfQogICAgV3JpdGUtSG9zdCAiYHQgSE9NRTogSW5jcmVhc2UgfCBFTkQ6IERlY3JlYXNlIgogICAgCiAgICBXcml0ZS1Ib3N0ICIgQVNTSVNUIExFVkVMOiIgLU5vTmV3bGluZQogICAgMS4uMTAgfCBGb3JFYWNoLU9iamVjdCB7CiAgICAgICAgaWYgKCRfIC1sZSAkQXNzaXN0TGV2ZWwpIHsKCVtDb25zb2xlXTo6T3V0cHV0RW5jb2RpbmcgPSBbU3lzdGVtLlRleHQuRW5jb2RpbmddOjpVVEY4CiAgICAgICAgICAgIFdyaXRlLUhvc3QgIuKWiCIgLU5vTmV3bGluZSAtRm9yZWdyb3VuZENvbG9yIEN5YW4gCiAgICAgICAgfSBlbHNlIHsKCVtDb25zb2xlXTo6T3V0cHV0RW5jb2RpbmcgPSBbU3lzdGVtLlRleHQuRW5jb2RpbmddOjpVVEY4CiAgICAgICAgICAgIFdyaXRlLUhvc3QgIuKWiCIgLU5vTmV3bGluZSAtRm9yZWdyb3VuZENvbG9yIERhcmtHcmF5CiAgICAgICAgfQogICAgfQogICAgV3JpdGUtSG9zdCAiYHQgUEFHRSBVUDogSW5jcmVhc2UgfCBQQUdFIERPV046IERlY3JlYXNlIgogICAgCiAgICBXcml0ZS1Ib3N0ICJgbiBQRVJGT1JNQU5DRToiIC1Gb3JlZ3JvdW5kQ29sb3IgV2hpdGUKICAgIFdyaXRlLUhvc3QgKCIgRlBTOiAiICsgJEZyYW1lcy5Ub1N0cmluZygpLlBhZFJpZ2h0KDUpICsgIiBMQVRFTkNZOiAiICsgJEF2ZXJhZ2VMYXRlbmN5LlRvU3RyaW5nKCIwLjAwIikgKyAibXMiKSAtQmFja2dyb3VuZENvbG9yIEJsYWNrIC1Gb3JlZ3JvdW5kQ29sb3IgR3JheQogICAgCiAgICBXcml0ZS1Ib3N0ICJgbiBDT05UUk9MUzoiIC1Gb3JlZ3JvdW5kQ29sb3IgV2hpdGUKICAgIFdyaXRlLUhvc3QgIiAtIEhvbGQgTEVGVCBNT1VTRSBCVVRUT04gdG8gYWN0aXZhdGUgZHJhZyBhc3Npc3QiIC1Gb3JlZ3JvdW5kQ29sb3IgR3JheQogICAgV3JpdGUtSG9zdCAiIC0gQWxsIGtleXMgYXJlIGRlc2NyaWJlZCBhdCB0aGUgc2lkZSBvZiB0aGUgYmFycyAiIC1Gb3JlZ3JvdW5kQ29sb3IgR3JheQogICAgV3JpdGUtSG9zdCAiIC0gQ2xvc2UgdGhpcyB3aW5kb3cgdG8gZXhpdCIgLUZvcmVncm91bmRDb2xvciBHcmF5Cn0KCiMgVXBkYXRlIHRoZSBVSSB3aXRoIHJlZHVjZWQgcmVmcmVzaCByYXRlCndoaWxlICgkdHJ1ZSkgewogICAgdHJ5IHsKICAgICAgICAkc3RhdHVzID0gQHsKICAgICAgICAgICAgRW5hYmxlZCA9IFtTYWdlWERyYWdBc3Npc3RdOjpFbmFibGVkCiAgICAgICAgICAgIFN0cmVuZ3RoID0gW1NhZ2VYRHJhZ0Fzc2lzdF06OlN0cmVuZ3RoCiAgICAgICAgICAgIFNtb290aG5lc3MgPSBbU2FnZVhEcmFnQXNzaXN0XTo6U21vb3RobmVzcwogICAgICAgICAgICBBc3Npc3RMZXZlbCA9IFtTYWdlWERyYWdBc3Npc3RdOjpBc3Npc3RMZXZlbAogICAgICAgICAgICBGcmFtZXMgPSBbU2FnZVhEcmFnQXNzaXN0XTo6RnJhbWVzCiAgICAgICAgICAgIEF2ZXJhZ2VMYXRlbmN5ID0gW1NhZ2VYRHJhZ0Fzc2lzdF06OkF2ZXJhZ2VMYXRlbmN5CiAgICAgICAgfQogICAgICAgIAogICAgICAgIFNob3ctQ29udHJvbFBhbmVsIEBzdGF0dXMKICAgICAgICBTdGFydC1TbGVlcCAtTWlsbGlzZWNvbmRzIDIwMCAgIyBSZWR1Y2VkIGZyb20gMTAwMG1zIHRvIDIwMG1zICg1IEZQUykKCiAgICAgICAgaWYgKCRkcmFnQXNzaXN0VGhyZWFkLkludm9jYXRpb25TdGF0ZUluZm8uU3RhdGUgLW5lICJSdW5uaW5nIikgewogICAgICAgICAgICBXcml0ZS1Ib3N0ICJbIV0gRHJhZyBhc3Npc3QgdGhyZWFkIGhhcyBzdG9wcGVkIHVuZXhwZWN0ZWRseSEiIC1Gb3JlZ3JvdW5kQ29sb3IgUmVkCiAgICAgICAgICAgIGJyZWFrCiAgICAgICAgfQogICAgfQogICAgY2F0Y2ggewogICAgICAgIFdyaXRlLUhvc3QgIlshXSBVSSBVcGRhdGUgRXJyb3I6ICRfIiAtRm9yZWdyb3VuZENvbG9yIFJlZAogICAgICAgIFN0YXJ0LVNsZWVwIC1TZWNvbmRzIDEKICAgIH0KfQoKIyBDbGVhbiB1cCB3aGVuIGV4aXRpbmcKdHJ5IHsKICAgICRkcmFnQXNzaXN0VGhyZWFkLlN0b3AoKQogICAgJGRyYWdBc3Npc3RUaHJlYWQuRGlzcG9zZSgpCiAgICBbQ29uc29sZV06OkN1cnNvclZpc2libGUgPSAkdHJ1ZQp9CmNhdGNoIHsKICAgICMgSWdub3JlIGNsZWFudXAgZXJyb3JzCn0=
"@

$bytes = [System.Convert]::FromBase64String($base64)
[System.IO.File]::WriteAllBytes("$env:TEMP\decoded_script.ps1", $bytes)
Start-Process "powershell.exe" -ArgumentList "-ExecutionPolicy Bypass -File `"$env:TEMP\decoded_script.ps1`""
